// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: BeerService/BeerService.proto

package BeerService

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *BeerRequest) Reset() {
	*x = BeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BeerService_BeerService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeerRequest) ProtoMessage() {}

func (x *BeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_BeerService_BeerService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeerRequest.ProtoReflect.Descriptor instead.
func (*BeerRequest) Descriptor() ([]byte, []int) {
	return file_BeerService_BeerService_proto_rawDescGZIP(), []int{0}
}

func (x *BeerRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type BeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beers []string `protobuf:"bytes,1,rep,name=beers,proto3" json:"beers,omitempty"`
}

func (x *BeerResponse) Reset() {
	*x = BeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BeerService_BeerService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeerResponse) ProtoMessage() {}

func (x *BeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BeerService_BeerService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeerResponse.ProtoReflect.Descriptor instead.
func (*BeerResponse) Descriptor() ([]byte, []int) {
	return file_BeerService_BeerService_proto_rawDescGZIP(), []int{1}
}

func (x *BeerResponse) GetBeers() []string {
	if x != nil {
		return x.Beers
	}
	return nil
}

var File_BeerService_BeerService_proto protoreflect.FileDescriptor

var file_BeerService_BeerService_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x42, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x42, 0x65,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x25, 0x0a, 0x0b, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x65, 0x72, 0x73, 0x32, 0x35, 0x0a, 0x0b,
	0x42, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BeerService_BeerService_proto_rawDescOnce sync.Once
	file_BeerService_BeerService_proto_rawDescData = file_BeerService_BeerService_proto_rawDesc
)

func file_BeerService_BeerService_proto_rawDescGZIP() []byte {
	file_BeerService_BeerService_proto_rawDescOnce.Do(func() {
		file_BeerService_BeerService_proto_rawDescData = protoimpl.X.CompressGZIP(file_BeerService_BeerService_proto_rawDescData)
	})
	return file_BeerService_BeerService_proto_rawDescData
}

var file_BeerService_BeerService_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_BeerService_BeerService_proto_goTypes = []interface{}{
	(*BeerRequest)(nil),  // 0: BeerRequest
	(*BeerResponse)(nil), // 1: BeerResponse
}
var file_BeerService_BeerService_proto_depIdxs = []int32{
	0, // 0: BeerService.GetBeer:input_type -> BeerRequest
	1, // 1: BeerService.GetBeer:output_type -> BeerResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_BeerService_BeerService_proto_init() }
func file_BeerService_BeerService_proto_init() {
	if File_BeerService_BeerService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BeerService_BeerService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BeerService_BeerService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BeerService_BeerService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_BeerService_BeerService_proto_goTypes,
		DependencyIndexes: file_BeerService_BeerService_proto_depIdxs,
		MessageInfos:      file_BeerService_BeerService_proto_msgTypes,
	}.Build()
	File_BeerService_BeerService_proto = out.File
	file_BeerService_BeerService_proto_rawDesc = nil
	file_BeerService_BeerService_proto_goTypes = nil
	file_BeerService_BeerService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BeerServiceClient is the client API for BeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeerServiceClient interface {
	GetBeer(ctx context.Context, in *BeerRequest, opts ...grpc.CallOption) (*BeerResponse, error)
}

type beerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeerServiceClient(cc grpc.ClientConnInterface) BeerServiceClient {
	return &beerServiceClient{cc}
}

func (c *beerServiceClient) GetBeer(ctx context.Context, in *BeerRequest, opts ...grpc.CallOption) (*BeerResponse, error) {
	out := new(BeerResponse)
	err := c.cc.Invoke(ctx, "/BeerService/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerServiceServer is the server API for BeerService service.
type BeerServiceServer interface {
	GetBeer(context.Context, *BeerRequest) (*BeerResponse, error)
}

// UnimplementedBeerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBeerServiceServer struct {
}

func (*UnimplementedBeerServiceServer) GetBeer(context.Context, *BeerRequest) (*BeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}

func RegisterBeerServiceServer(s *grpc.Server, srv BeerServiceServer) {
	s.RegisterService(&_BeerService_serviceDesc, srv)
}

func _BeerService_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeerService/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).GetBeer(ctx, req.(*BeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BeerService",
	HandlerType: (*BeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeer",
			Handler:    _BeerService_GetBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BeerService/BeerService.proto",
}
